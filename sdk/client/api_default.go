/*
Integration Adapter

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type ApiAccountsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	signature *string
	signatureTime *string
	accountsRequest *AccountsRequest
}

// Request&#39;s signature
func (r ApiAccountsRequest) Signature(signature string) ApiAccountsRequest {
	r.signature = &signature
	return r
}

// Request&#39;s signature time
func (r ApiAccountsRequest) SignatureTime(signatureTime string) ApiAccountsRequest {
	r.signatureTime = &signatureTime
	return r
}

func (r ApiAccountsRequest) AccountsRequest(accountsRequest AccountsRequest) ApiAccountsRequest {
	r.accountsRequest = &accountsRequest
	return r
}

func (r ApiAccountsRequest) Execute() (*http.Response, error) {
	return r.ApiService.AccountsExecute(r)
}

/*
Accounts Accounts

| Field | Description |
| --- | --- |
| `id` | UUID. |
| `object` | string. ACCOUNT |
| action | string. CONNECT, DISCONNECT, RECONNECT |
| accounts | account credential object |

account object

| **Field** | **Description** |
| --- | --- |
| data | encrypted credential data |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAccountsRequest
*/
func (a *DefaultAPIService) Accounts(ctx context.Context) ApiAccountsRequest {
	return ApiAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) AccountsExecute(r ApiAccountsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.Accounts")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.signature != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature", r.signature, "simple", "")
	}
	if r.signatureTime != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature-time", r.signatureTime, "simple", "")
	}
	// body params
	localVarPostBody = r.accountsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeliveryOrdersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	signature *string
	deliveryOrdersRequest *DeliveryOrdersRequest
}

func (r ApiDeliveryOrdersRequest) Signature(signature string) ApiDeliveryOrdersRequest {
	r.signature = &signature
	return r
}

func (r ApiDeliveryOrdersRequest) DeliveryOrdersRequest(deliveryOrdersRequest DeliveryOrdersRequest) ApiDeliveryOrdersRequest {
	r.deliveryOrdersRequest = &deliveryOrdersRequest
	return r
}

func (r ApiDeliveryOrdersRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeliveryOrdersExecute(r)
}

/*
DeliveryOrders Delivery Orders

Top level

| **Field** | **Description** |
| --- | --- |
| id | string. UUID. |
| object | string. DELIVERY_ORDER. |
| action | string. CREATE. |
| delivery_orders | An array of delivery_order object. |

delivery_order object

| **Field** | **Description** |
| --- | --- |
|  |  |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeliveryOrdersRequest
*/
func (a *DefaultAPIService) DeliveryOrders(ctx context.Context) ApiDeliveryOrdersRequest {
	return ApiDeliveryOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) DeliveryOrdersExecute(r ApiDeliveryOrdersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.DeliveryOrders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/delivery-orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.signature != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature", r.signature, "simple", "")
	}
	// body params
	localVarPostBody = r.deliveryOrdersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProductsRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	productsRequest *ProductsRequest
}

func (r ApiProductsRequest) ProductsRequest(productsRequest ProductsRequest) ApiProductsRequest {
	r.productsRequest = &productsRequest
	return r
}

func (r ApiProductsRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProductsExecute(r)
}

/*
Products Products

Top level

| **Field** | **Description** |
| --- | --- |
| id | string. UUID. |
| object | string. PRODUCT. |
| action | string. CREATE. |
| products | An array of product object. |

`product` object

| **Field** | **Description** |
| --- | --- |
|  |  |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProductsRequest
*/
func (a *DefaultAPIService) Products(ctx context.Context) ApiProductsRequest {
	return ApiProductsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) ProductsExecute(r ApiProductsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.Products")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSalesOrdersRequest struct {
	ctx context.Context
	ApiService *DefaultAPIService
	salesOrdersRequest *SalesOrdersRequest
}

func (r ApiSalesOrdersRequest) SalesOrdersRequest(salesOrdersRequest SalesOrdersRequest) ApiSalesOrdersRequest {
	r.salesOrdersRequest = &salesOrdersRequest
	return r
}

func (r ApiSalesOrdersRequest) Execute() (*http.Response, error) {
	return r.ApiService.SalesOrdersExecute(r)
}

/*
SalesOrders Sales Orders

Top level

| **Field** | **Description** |
| --- | --- |
| id | string. UUID. |
| object | string. PRODUCT. |
| action | string. CREATE. |
| sales_orders | An array of sales order object. |

sales order object

| **Field** | **Description** |
| --- | --- |
|  |  |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSalesOrdersRequest
*/
func (a *DefaultAPIService) SalesOrders(ctx context.Context) ApiSalesOrdersRequest {
	return ApiSalesOrdersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SalesOrdersExecute(r ApiSalesOrdersRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SalesOrders")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales-orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.salesOrdersRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
