/*
Integration Adapter

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the UpdateStockLevelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStockLevelRequest{}

// UpdateStockLevelRequest struct for UpdateStockLevelRequest
type UpdateStockLevelRequest struct {
	Id *string `json:"id,omitempty"`
	Requests []UpdateStockLevelRequestRequestsInner `json:"requests,omitempty"`
	Store *UpdateStockLevelRequestStore `json:"store,omitempty"`
}

// NewUpdateStockLevelRequest instantiates a new UpdateStockLevelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStockLevelRequest() *UpdateStockLevelRequest {
	this := UpdateStockLevelRequest{}
	return &this
}

// NewUpdateStockLevelRequestWithDefaults instantiates a new UpdateStockLevelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStockLevelRequestWithDefaults() *UpdateStockLevelRequest {
	this := UpdateStockLevelRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UpdateStockLevelRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockLevelRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UpdateStockLevelRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UpdateStockLevelRequest) SetId(v string) {
	o.Id = &v
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *UpdateStockLevelRequest) GetRequests() []UpdateStockLevelRequestRequestsInner {
	if o == nil || IsNil(o.Requests) {
		var ret []UpdateStockLevelRequestRequestsInner
		return ret
	}
	return o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockLevelRequest) GetRequestsOk() ([]UpdateStockLevelRequestRequestsInner, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// HasRequests returns a boolean if a field has been set.
func (o *UpdateStockLevelRequest) HasRequests() bool {
	if o != nil && !IsNil(o.Requests) {
		return true
	}

	return false
}

// SetRequests gets a reference to the given []UpdateStockLevelRequestRequestsInner and assigns it to the Requests field.
func (o *UpdateStockLevelRequest) SetRequests(v []UpdateStockLevelRequestRequestsInner) {
	o.Requests = v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *UpdateStockLevelRequest) GetStore() UpdateStockLevelRequestStore {
	if o == nil || IsNil(o.Store) {
		var ret UpdateStockLevelRequestStore
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStockLevelRequest) GetStoreOk() (*UpdateStockLevelRequestStore, bool) {
	if o == nil || IsNil(o.Store) {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *UpdateStockLevelRequest) HasStore() bool {
	if o != nil && !IsNil(o.Store) {
		return true
	}

	return false
}

// SetStore gets a reference to the given UpdateStockLevelRequestStore and assigns it to the Store field.
func (o *UpdateStockLevelRequest) SetStore(v UpdateStockLevelRequestStore) {
	o.Store = &v
}

func (o UpdateStockLevelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStockLevelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}
	if !IsNil(o.Store) {
		toSerialize["store"] = o.Store
	}
	return toSerialize, nil
}

type NullableUpdateStockLevelRequest struct {
	value *UpdateStockLevelRequest
	isSet bool
}

func (v NullableUpdateStockLevelRequest) Get() *UpdateStockLevelRequest {
	return v.value
}

func (v *NullableUpdateStockLevelRequest) Set(val *UpdateStockLevelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStockLevelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStockLevelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStockLevelRequest(val *UpdateStockLevelRequest) *NullableUpdateStockLevelRequest {
	return &NullableUpdateStockLevelRequest{value: val, isSet: true}
}

func (v NullableUpdateStockLevelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStockLevelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


