/*
Integration Adapter

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// InventoriesAPIService InventoriesAPI service
type InventoriesAPIService service

type ApiUpdateStockLevelRequest struct {
	ctx context.Context
	ApiService *InventoriesAPIService
	signature *string
	signatureTime *string
	updateStockLevelRequest *UpdateStockLevelRequest
}

// Requests Signature
func (r ApiUpdateStockLevelRequest) Signature(signature string) ApiUpdateStockLevelRequest {
	r.signature = &signature
	return r
}

// Requests Signature Time
func (r ApiUpdateStockLevelRequest) SignatureTime(signatureTime string) ApiUpdateStockLevelRequest {
	r.signatureTime = &signatureTime
	return r
}

func (r ApiUpdateStockLevelRequest) UpdateStockLevelRequest(updateStockLevelRequest UpdateStockLevelRequest) ApiUpdateStockLevelRequest {
	r.updateStockLevelRequest = &updateStockLevelRequest
	return r
}

func (r ApiUpdateStockLevelRequest) Execute() (*UpdateStockLevel200Response, *http.Response, error) {
	return r.ApiService.UpdateStockLevelExecute(r)
}

/*
UpdateStockLevel Update Stock Level

Top level

| **Field** | **Description** |
| --- | --- |
| `id` | REQUIRED. string, UUID. |
| `object` | `INVENTORY` |
| `action` | `UPDATE` |
| `metadata` | `metadata` object. |
| `inventories` | An array of `inventory` object |

`metadata` Object

| **Field** | **Description** |
| --- | --- |
| `store_code` | string. |
| merchant_code | string. |

`inventories`

| **Field** | **Description** |
| --- | --- |
| `product_id` | string. Company product id. |
| `variant_id` | string. Company product's variant id. |
| `sku` | string. Company product's variant sku. |
| `channel_product_id` | string. Channel product id. |
| `channel_variant_id` | string. Channel product's variant id. |
| `channel_sku` | string. Channel product's variant sku. |
| `location_code` | string. Company location code. |
| `channel_location_code` | string. Channel location code. |
| `exact_stock` | integer. exact stock. replace currently available stock value. |
| `delta_stock` | integer. delta stock. positive add currently available stock, negative reduce currently available stock. |

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateStockLevelRequest
*/
func (a *InventoriesAPIService) UpdateStockLevel(ctx context.Context) ApiUpdateStockLevelRequest {
	return ApiUpdateStockLevelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UpdateStockLevel200Response
func (a *InventoriesAPIService) UpdateStockLevelExecute(r ApiUpdateStockLevelRequest) (*UpdateStockLevel200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UpdateStockLevel200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoriesAPIService.UpdateStockLevel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/inventories/update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.signature != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature", r.signature, "simple", "")
	}
	if r.signatureTime != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "signature-time", r.signatureTime, "simple", "")
	}
	// body params
	localVarPostBody = r.updateStockLevelRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v UpdateStockLevel400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v UpdateStockLevel429Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v UpdateStockLevel500Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
